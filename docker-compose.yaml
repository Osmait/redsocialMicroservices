x-logging: &default-logging
  driver: loki
  options:
    loki-url: "http://localhost:3100/api/prom/push"
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'
services:
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
  rabbitmq-notification:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    logging: *default-logging

  auth-service:
    build:
      context: AuthService/
      dockerfile: Dockerfile
    ports:
      - 8001:8001

    logging: *default-logging

  # Api GateWay
  api-gateway:
    build:
      context: apiGateway/
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    environment:
      - USER_HOST=user-service
      - USER_PORT=8080
      - POST_HOST=post-service
      - POST_PORT=3000
      - COMMENT_HOST=comment-service
      - COMMENT_PORT=8000
      - FOLLOWER_HOST=follower-service
      - FOLLOWER_PORT=3001

    logging: *default-logging
  # UserService
  postgres-user:
    image: postgres:13
    environment:
      - POSTGRES_DB=my_store
      - POSTGRES_USER=osmait
      - POSTGRES_PASSWORD=admin123
    ports:
      - 5432:5432
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    logging: *default-logging

  user-service:
    build:
      context: userService/userService/
      dockerfile: Dockerfile
    environment:
      - DB_PORT=5432
      - DB_DATABASE=my_store
      - DB_USER=osmait
      - DB_PASSWORD=admin123
      - DB_HOSTNAME=postgres-user
    ports:
      - 8080:8080
    depends_on:
      - postgres-user
    restart: always

    logging: *default-logging
  # PostService

  # postgres-post:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_DB=my_store
  #     - POSTGRES_USER=osmait
  #     - POSTGRES_PASSWORD=admin123
  #   ports:
  #     - 5433:5433
  #   volumes:
  #     - ./postgres_data:/var/lib/postgresql/data

  post-service:
    build:
      context: PostServices/post-service/
      dockerfile: Dockerfile
    environment:
      - DB_PORT=5432
      - DB_DATABASE=my_store
      - DB_USER=osmait
      - DB_PASSWORD=admin123
      - DB_HOSTNAME=postgres-user
      - USER_URL=comment-service
    ports:
      - 3000:3000
    restart: always
    # depends_on:
    logging: *default-logging
    #   - postgres-post

  # CommentService

  comment-service:
    build:
      context: CommentServices/
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    restart: always
    logging: *default-logging

  # postgres-comment:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_DB=my_store
  #     - POSTGRES_USER=osmait
  #     - POSTGRES_PASSWORD=admin123
  #   ports:
  #     - 5434:5434
  #   volumes:
  #     - ./postgres_data:/var/lib/postgresql/data

  # Notification Service

  notification-service:
    build:
      context: notificationService/
      dockerfile: Dockerfile
    environment:
      - HOST_RABBIT=rabbitmq-notification
    ports:
      - 8083:8083
    depends_on:
      - rabbitmq-notification
    restart: always

    logging: *default-logging
  # Follower Service
  follower-service:
    build:
      context: followersService/follower-service
      dockerfile: Dockerfile
    environment:
      - DB_PORT=5432
      - DB_DATABASE=my_store
      - DB_USER=osmait
      - DB_PASSWORD=admin123
      - DB_HOSTNAME=postgres-user
      - USER_URL="http//user-service:8080"
    ports:
      - 3001:3001
    # depends_on:

    #   - postgres-follower
    restart: always

    logging: *default-logging
  # postgres-follower:
  #     image: postgres:13
  #     environment:
  #       - POSTGRES_DB=my_store
  #       - POSTGRES_USER=osmait
  #       - POSTGRES_PASSWORD=admin123
  #     ports:
  #       - 5435:5435
  #     volumes:
  #       - ./postgres_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3002:3000"
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://osmait:admin123@postgres-user:5432/my_store?sslmode=disable"
    links:
      - postgres-user
      - prometheus

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:v1.0.0-RC9
    environment:
      RABBIT_URL: "http://rabbitmq-notification:15672"

    links:
      - rabbitmq-notification
      - prometheus
volumes:
  grafana_data:
